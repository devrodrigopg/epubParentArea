{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["export type Location = {\n  atStart?: boolean;\n  atEnd?: boolean;\n  end: {\n    cfi: ePubCfi;\n    displayed: {\n      page: number;\n      total: number;\n    };\n    href: string;\n    index: number;\n    location: number;\n    percentage: number;\n  };\n  start: {\n    cfi: ePubCfi;\n    displayed: {\n      page: number;\n      total: number;\n    };\n    href: string;\n    index: number;\n    location: number;\n    percentage: number;\n  };\n};\n\nexport type Mark = 'highlight' | 'underline';\n\nexport type FontSize = string;\n\n/**\n * @example\n * ````\n * epubcfi(/6/6!/4/2,/2/2/1:0,/4[q1]/2/14/2/1:14)\n * ````\n */\nexport type ePubCfi = string;\n\nexport type Themes = {\n  [key: string]: Theme;\n};\n\nexport type Theme = {\n  [key: string]: {\n    [key: string]: string;\n  };\n};\n\nexport type SearchResult = {\n  cfi: ePubCfi;\n  excerpt: string;\n};\n\nexport type LoadingFileProps = {\n  fileSize: number;\n  downloadProgress: number;\n  downloadSuccess: boolean;\n  downloadError: string | null;\n};\n\ntype FileSystem = {\n  file: string | null;\n  progress: number;\n  downloading: boolean;\n  size: number;\n  error: string | null;\n  success: boolean;\n  downloadFile: (\n    fromUrl: string,\n    toFile: string\n  ) => Promise<{ uri: string | null; mimeType: string | null }>;\n  getFileInfo: (\n    fileUri: string\n  ) => Promise<{\n    uri: string;\n    exists: boolean;\n    isDirectory: boolean;\n    size: number | undefined;\n  }>;\n};\n\nexport interface ReaderProps {\n  /**\n   * Can be a `base64`, `epub`, `opf` or `binary`.\n   * @param {object} src\n   */\n  src: string;\n  /**\n   * @param {ePubCfi[]} locations\n   * @example\n   * ```\n   * <Reader\n   *  src={{\n   *    locations: ['epubcfi(/6/2...', 'epubcfi(/6/4...']\n   *  }}\n   * />\n   * ```\n   */\n  initialLocations?: ePubCfi[];\n  /**\n   * Called once the book loads is started\n   * @returns {void} void\n   */\n  onStarted?: () => void;\n  /**\n   * Called once book has been displayed\n   * @params {number} totalLocations {@link number}\n   * @params {currentLocation} currentLocation {@link CurrentLocation}\n   * @params {number} progress {@link number}\n   * @returns {void} void\n   */\n  onReady?: (\n    totalLocations: number,\n    currentLocation: Location,\n    progress: number\n  ) => void;\n  /**\n   * Called once book has not been displayed\n   * @param {string} reason\n   * @returns {void} void\n   */\n  onDisplayError?: (reason: string) => void;\n  /**\n   * Emit that the rendition has been resized\n   * @param {any} layout\n   * @returns {void} void\n   */\n  onResized?: (layout: any) => void;\n  /**\n   * Called when occurred a page change\n   * @param {string} cfi\n   * @param {number} progress\n   * @param {number} totalPages\n   * @returns {void} void\n   */\n  onLocationChange?: (\n    totalLocations: number,\n    currentLocation: Location,\n    progress: number\n  ) => void;\n  /**\n   * Called once when the book has been searched\n   * @param {SearchResult[]} results\n   * @returns {void} void\n   */\n  onSearch?: (results: SearchResult[]) => void;\n  /**\n   * Called once the locations has been generated\n   * @param {string} locations\n   * @returns {void} void\n   */\n  onLocationsReady?: (epubKey: string, locations: ePubCfi[]) => void;\n  /**\n   * Called once a text selection has occurred\n   * @param {SelectedText} selectedText\n   * @returns {void} void\n   */\n  onSelected?: (selectedText: string, cfiRange: ePubCfi) => void;\n  /**\n   * Called when marked text is pressed\n   * @param {SelectedText} selectedText\n   * @returns {void} void\n   */\n  onMarkPressed?: (selectedText: string, cfiRange: ePubCfi) => void;\n  /**\n   * Called when screen orientation change is detected\n   * @param {string} orientation\n   * @returns {void} void\n   */\n  onOrientationChange?: (orientation: '-90' | '0' | '90') => void;\n  /**\n   * Called when the book is on the homepage\n   * @returns {void} void\n   */\n  onBeginning?: () => void;\n  /**\n   * Called when the book is on the final page\n   * @returns {void} void\n   */\n  onFinish?: () => void;\n  /**\n   * Emit that a section has been rendered\n   * @param {any} section\n   * @param {any} currentSection\n   * @returns {void} void\n   */\n  onRendered?: (section: any, currentSection: any) => void;\n  /**\n   * Called when book layout is change\n   * @param {string} layout\n   * @returns {void} void\n   */\n  onLayout?: (layout: any) => void;\n  /**\n   * @param {any} toc\n   * @returns {void} void\n   */\n  onNavigationLoaded?: (toc: any) => void;\n  /**\n   * Called when the book was pressed\n   * @returns {void} void\n   */\n  onPress?: () => void;\n  /**\n   * Called when the book was double pressed\n   * @returns {void} void\n   */\n  onDoublePress?: () => void;\n  /**\n   * width of the ePub Rendition\n   * @param {number} width\n   */\n  width: number;\n  /**\n   * height of the ePub Rendition\n   * @param {number} height\n   */\n  height: number;\n  /**\n   * Can be an ePubCfi or chapter url\n   */\n  initialLocation?: string;\n  /**\n   * Enable swipe actions\n   * @default true\n   */\n  enableSwipe?: boolean;\n  /**\n   * Called when swipe left gesture is detected\n   * @returns {void} void\n   */\n  onSwipeLeft?: () => void;\n  /**\n   * Called when swipe right gesture is detected\n   * @returns {void} void\n   */\n  onSwipeRight?: () => void;\n  /**\n   * Render when the book is loading\n   * @returns {JSX.Element} JSX.Element\n   */\n  renderLoadingFileComponent?: (props: LoadingFileProps) => JSX.Element;\n  /**\n   * Appears when the book is been rendering\n   * @returns {JSX.Element} JSX.Element\n   */\n  renderOpeningBookComponent?: () => JSX.Element;\n  /**\n   * Enable text selection feature on the book\n   * @default false\n   * @description Recommend using this with `enableSwipe` disabled\n   */\n  enableSelection?: boolean;\n\n  /**\n   * @param theme {@link Theme}\n   * @example\n   * ```\n   * <Reader\n   *  defaultTheme={{ \"body\": { \"color\": \"black\" } }}\n   * />\n   * ```\n   */\n  defaultTheme?: Theme;\n\n  fileSystem(): FileSystem;\n}\n"],"mappings":""}