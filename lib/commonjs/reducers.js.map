{"version":3,"names":["Types","exports","bookReducer","state","action","type","REGISTER_THEME","themes","payload"],"sources":["reducers.ts"],"sourcesContent":["import type { Theme, Themes } from './types';\n\nexport type InitialStateType = {\n  themes: Themes;\n  activeTheme: string;\n};\n\ntype ActionMap<M extends { [index: string]: any }> = {\n  [Key in keyof M]: M[Key] extends undefined\n    ? {\n        type: Key;\n      }\n    : {\n        type: Key;\n        payload: M[Key];\n      };\n};\n\nexport enum Types {\n  REGISTER_THEME = 'REGISTER_THEME',\n  REGISTER_THEMES = 'REGISTER_THEMES',\n  SELECT_THEME = 'SELECT_THEME',\n}\n\ntype BookPayload = {\n  [Types.REGISTER_THEME]: Theme;\n  [Types.REGISTER_THEMES]: Themes;\n  [Types.SELECT_THEME]: string;\n};\n\nexport type BookActions = ActionMap<BookPayload>[keyof ActionMap<BookPayload>];\n\nexport const bookReducer = (state: InitialStateType, action: BookActions) => {\n  switch (action.type) {\n    case Types.REGISTER_THEME:\n      return {\n        ...state.themes,\n        ...action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"],"mappings":";;;;;;IAkBYA,KAAK,0BAALA,KAAK;EAALA,KAAK;EAALA,KAAK;EAALA,KAAK;EAAA,OAALA,KAAK;AAAA;AAAAC,OAAA,CAAAD,KAAA,GAAAA,KAAA;AAcV,MAAME,WAAW,GAAGA,CAACC,KAAuB,EAAEC,MAAmB,KAAK;EAC3E,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKL,KAAK,CAACM,cAAc;MACvB,OAAO;QACL,GAAGH,KAAK,CAACI,MAAM;QACf,GAAGH,MAAM,CAACI;MACZ,CAAC;IACH;MACE,OAAOL,KAAK;EAChB;AACF,CAAC;AAACF,OAAA,CAAAC,WAAA,GAAAA,WAAA"}